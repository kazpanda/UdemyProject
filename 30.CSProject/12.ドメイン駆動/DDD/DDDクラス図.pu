@startuml

'##############################################
' 2019/09/12 吉冨 新規作成
'##############################################

title ドメイン駆動開発 クラス図

' --------------------------------------------
' Domain
' --------------------------------------------
package DDD.Domain <<Frame>>{

   ' Entitiy
   package Entity <<Rectangle>> {

      class AreaEntity {
         + int AreaId
         + string AreaName
         --
      }

      class WeatherEntity {
         + int AreaId
         + Datetime DataDate
         + Condition Condition
         + Temperature Temperature
         --
         + bool IsMousho()
         + bool IsOK()
      }
   }

   ' Exceptions
   package Entity <<Rectangle>> {
      class InputException {
      }
   }

   ' Helpers
   package Helpers <<Rectangle>> {
      class FloatHelper{
         + RoundString(value,decimalPoint)
      }
      class Guard{
      --
         + IsNull()
      }
   }

   ' Repositories
   package Repositories <<Rectangle>> {
      interface IAreasRepository{
      --
         + AreaEntity GetData()
      }

      interface IWeatherRepository{
      --
         + WeatherEntity GetLatest(int areaId)
         + WeatherEntity GetLatest()
      }
      note right
         テスト環境Entity
      end note
   }

   ' ValueObjects
   package ValueObjects <<Rectangle>> {
      class AreaId{
         + int Value
         --
         + EqualsCore(other)
         + DisplayValue()
      }

      class Condition{
         + Condition None
         + Condition Sunny
         + Condition Cloudy
         + Condition Rain
         + Condition Value
         --
         + Condition(value)
         + string DisplayValue()
         + Condition ToList()
         - bool EqualsCore(other)
      }

      class Temperature{
         + string UnitName
         + int DecimalPoint
         + float Value
         --
         + string DisplayValue
         + string DisplayValueWithUnit
         + string DisplayValueWithUnitSpace
         - bool EqualsCore(other)
      }

      class ValueObjectBase<T> {
         + override bool Equals(object obj)
         + static bool operator
         - abstract bool EqualsCore(T other)
         + override string ToString()
         + override int GetHashCode()
      }
   }
}

' --------------------------------------------
' Infrastructure
' --------------------------------------------
package DDD.Infrastructure <<Frame>>{
  ' SQLite
   package SQLite <<Rectangle>> {
      class AreasSQLite {
         + string ConnenctionString
         --
         + AreaEntity GetData()
         - AreaEntity CreateEntity(reader)
      }
      class WetherSQLite {
         --
         + WeatherEntity GetLatest()
         - WeatherEntity CreateEntity(reader)
      }
       class SQLiteHelper {
         + string ConnenctionString
         --
         + T Query(sql,parameters,createEntity)
         + T QuerySingle(sql,parameters,createEntity)
      }
   }
}

' --------------------------------------------
' WinForm
' --------------------------------------------
package DDD.WinForm <<Frame>> {
   package Views <<Rectangle>> {
      class WeatherLatestView{
         --
         - void LatestButton_Click()
         - void ListButton_Click()
      }

      class WeatherListView{

      }
   }

   package ViewsModel <<Rectangle>> {

      class ViewModelBase{
         + EventHandler PropertyChanged
         --
         + bool SetProperty()
         + DateTime GetDateTime()
      }

      class WeatherListViewModel{
         --
         + BindingList Weathers()
      }

      class WeatherListViewModelWeather{
         + string AreaId
         + string AreaName
         + string DataDateText
         + string ConditionText
         + string TemperatureText
      }

      class WeatherSaveViewModel{
         + object SelectedAreaId
         + string DataDateText
         + object SelectedCondition
         + string TemperatureText
         + Condition Conditions
         + AreaEntity Areas
         --
         + void Save()
      }

      class WeathrLatestViewModel{
         + string AreaIdText
         + string DataDateText
         + string ConditionText
         + string TemperatureText
         + AreaEntity Areas
         --
         + void Serch()
      }

      note left
         コンストラクターにて本番環境と
         テスト環境を切り替える
      end note


   }

   class Program{
      + Main()
   }
}

' --------------------------------------------
' Tests
' --------------------------------------------
package DDDTests.Test<<Frame>>{
      class TemperatureTest {
         + 小数点以下2桁で丸めて表示する()
         + 温度Equals()
         + 温度EqualsEquals()
         + 値型Equals()
      }

      class WeatherListViewModelTest {
         + 天気一覧画面シナリオ()
      }
      class WeatherSaveViewModelTest {
         + 天気登録シナリオ()
      }
      class WeathrLatestViewModelTest {
         + シナリオ()
      }
      class WeathrLatestViewModelTest {
         + シナリオ1()
      }
}

' --------------------------------------------
' データベース
' --------------------------------------------
package DB{
   database SQLiteDB{
   }
}

'----------------------------------------------
'リレーション
'----------------------------------------------
'View
WeatherLatestView <-- WeathrLatestViewModel

' Test
TemperatureTest <-- WeathrLatestViewModel
WeathrLatestViewModelTest <-- WeathrLatestViewModel

'ViewModel
WeathrLatestViewModel <-- Temperature
WeathrLatestViewModel <-- IWeatherRepository
WeathrLatestViewModel <-- Condition

'ValueObject
IWeatherRepository <-- WeatherEntity
Temperature <-- WeatherEntity
Temperature <-- ValueObjectBase
Temperature <--- FloatHelper

Condition <-- WeatherEntity
Condition <-- ValueObjectBase
WeatherEntity <- WetherSQLite

'SQLite
WetherSQLite <- SQLiteHelper
SQLiteHelper <..> SQLiteDB




@enduml