@startuml

'##############################################
' 2019/09/12 吉冨 新規作成
'##############################################

title ドメイン駆動開発 クラス図

' Tests
package DDDTests.Test<<Frame>>{
      class TemperatureTest {
         + 小数点以下2桁で丸めて表示する()
         + 温度Equals()
         + 温度EqualsEquals()
         + 値型Equals()
      }

      class WeathrLatestViewModelTest {
         + シナリオ()
      }
}

' WinForm
package DDD.WinForm <<Frame>> {
   package Views <<Rectangle>> {
      class WeatherLatestView{

      }
   }

   package ViewsModel <<Rectangle>> {
      class WeathrLatestViewModel{
         + string AreaIdText
         + string DataDateText 
         + string ConditionText 
         + string TemperatureText
         --
         + Serch()
      }
      note left 
         コンストラクターにて本番環境と
         テスト環境を切り替える         
      end note

   }

   class Program{
      + Main()
   }  
}


' Infrastructure
package DDD.Infrastructure <<Frame>>{
  ' SQLite
   package SQLite <<Rectangle>> {
      class SQLiteHelper {
         + string ConnenctionString
      }
      class WetherSQLite {
         --
         + WeatherEntity GetLatest
      }
   }
}

' Domain
package DDD.Domain <<Frame>>{

   ' Entitiy
   package Entity <<Rectangle>> {
      class WeatherEntity {
         + int AreaId
         + Datetime DataDate
         + Condition Condition
         + Temperature Temperature
         --
         + bool IsMousho()
         + bool IsOK()
      }
   }

   ' Helpers
   package Helpers <<Rectangle>> {
      class FloatHelper{
         + RoundString(value,decimalPoint)
      }
   }

   ' Repositories
   package Repositories <<Rectangle>> {
      interface IWeatherRepository{
         + WeatherEntity GetLatest(int areaId)
      }
      note right 
         テスト環境Entity         
      end note
   }

   ' ValueObjects
   package ValueObjects <<Rectangle>> {
      class Condition{
         + Condition None
         + Condition Sunny
         + Condition Cloudy
         + Condition Rain
         --
         + Condition(value)
         + DisplayValue()
         - EqualsCore()
      }

      class Temperature{
         + string UnitName
         + int DecimalPoint
         --
         + Temperature(value)
         + string DisplayValue
         + string DisplayValueWithUnit
         + string DisplayValueWithUnitSpace
         - bool EqualsCore(other)         
      }

      class ValueObjectBase<T> {
         + override bool Equals(object obj)
         + static bool operator
         - abstract bool EqualsCore(T other)
         + override string ToString()
         + override int GetHashCode()
      }
   }
}

package DB{
   database SQLiteDB{
   }
}

'----------------------------------------------
'リレーション
'----------------------------------------------
'View
WeatherLatestView <-- WeathrLatestViewModel

' Test
TemperatureTest <-- WeathrLatestViewModel
WeathrLatestViewModelTest <-- WeathrLatestViewModel

'ViewModel
WeathrLatestViewModel <-- Temperature
WeathrLatestViewModel <-- IWeatherRepository
WeathrLatestViewModel <-- Condition

'ValueObject
IWeatherRepository <-- WeatherEntity
Temperature <-- WeatherEntity
Temperature <-- ValueObjectBase
Temperature <--- FloatHelper

Condition <-- WeatherEntity
Condition <-- ValueObjectBase
WeatherEntity <- WetherSQLite

'SQLite
WetherSQLite <- SQLiteHelper 
SQLiteHelper <..> SQLiteDB




@enduml